# section evaluation defines evaluation type and settings
[evaluation]

# bool      debug output
# default = 0
#
# enables output of debug information on cerr
# 0 equals false, any other number true
debug output = 0

# string    internal function
#
# enables internal evaluation (optimizer will evaluate individuals through an compile-time defined
# functions) when enabled, function name has to be specified in two parts (separated with space)
# first part defines the function collection (e.g. CEC2007) and second part defines the function
# from the collection (e.g. OKA2)
# when disabled, "command line" has to be specified for the external evaluation function
#
# valid collections:
#   CEC2007 (provided fsuite.so)
#       functions: OKA2 SYMPART S_ZDT1 S_ZDT2 S_ZDT4 R_ZDT4 S_ZDT6 S_DTLZ2 R_DTLZ2 S_DTLZ3 WFG1 WFG8 WFG9
#internal function = CEC2007 SYMPART

# int       internal function delay
#
# when specified and larger than 0, it enables a delay after every function evaluation (only works for
# internal functions).
# delay is specified in micro seconds
internal function delay = 0

# string	input file name
# default = input.txt
#
# specifies the name of file generated by optimizer and read by external evaluation program (file 
# contains individual chromosome / evaluation function input)
input file name = input.txt

# string	output file name
# default = output.txt
#
# specifies the name of file generated external evaluation program and read by optimizer (file 
# contains individual criteria / evaluation function output)
output file name = output.txt

# string	command line
#
# Specifies the the command line to be executed as an external evaluation function. Command must 
# write the output file and then return control back to the calling process
command line = ./run_python_simulator.sh

# unsigned int		chromosome vector length
#
# size of the chromosome vector (input file)
chromosome vector length = 16

# unsigned int		criteria vector length
#
# size of the criteria vector (should be 1 in case of single objective optimization)
criteria vector length = 3 

# unsigned int		properties vector length
# default = 0
#
# size of the properties vector
properties vector length = 0




# section that defines initial population
[initial population]

# string	file
#
# file containing individuals for not-completely-random initialization;
# if less than "optimization.population size" individuals are read from file, than some random 
# individuals are added to initial population
# if filename is not valid, initial population will be completely random
file = individuals_in.txt

# int		read generation
#
# read only specified generation from file (if file is specified)
# if set to -1, last generation will be read
read generation = -1

# float		min random ratio
# default = 0
#
# force some random individuals into the initial population 
# at least ("min random ratio" * "optimization.population size") random individuals will be 
# generated for the initial population and will replace randomly selected individuals read from file;
min random ratio = 0.5

# float[]	gene min
# default = 0
#
# vector of genes' minimum values used to generate initial population
# if less than the number of genes values are specified, last number is used for all the remaining genes
gene min = 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 

# float[]	gene max
# default = 1
#
# vector of genes' minimum values used to generate initial population
# if less than the number of genes values are specified, last number is used for all the remaining genes
gene max = 8 100 8 100 8 100 8 100 8 100 8 100 8 100 8 100 




# section optimization defines optimization algorithm parameters
[optimization]

# int				random seed
#
# starting random seed
# default = 0
#
# when set to zero, 'random' random seed is used (initialized with current time)
random seed = 0

# unsigned int		population size
#
# number of individuals in the population
population size = 50

# unsigned int		max number of generations
#
# main stopping criteria: maximum number of generations (initial, 0th population is not counted)
max number of evaluations = 1000

# string	DE schema
# default = rand/1/bin
#
# DE schema in format base_vector_selection/candidate_generation/recombination
# valid values for base vector selection:
#	rand					selects random individual from population
# valid values for candidate generation:
#	1						trial = rand_ind_1 + f1 * (rand_ind_2 - rand_ind_3)
#	2						trial = rand_ind_1 + f1 * (rand_ind_2 - rand_ind_3) + f2 * (rand_ind_4 - rand_ind_5)
# valid values for base recombination:
#	bin						'binomial' recombination
#	exp						'exponential' recombination
DE schema = rand/1/exp

# float		p crossover
# default = 0.5
#
# crossover probability (in DE crossover, 1 random gene from trial individual is always transferred
# to child, othere genes are transferred from trial with probability relative to the crossover probability)
p crossover = 0.5

# float[]	scaling factors
# default = 0.5
#
# vector of scaling factors (f1, f2, ... fn)
# space separates values in the vector
scaling factors = 0.5

# int		queue length
# default = 1
#
# length of workers' job queues in parallel runs
# number will be clipped to integral (0 ... 100)
queue length = 0


